# .github/workflows/build-format-test.yml
# ------------------------------------------------------------
# Workflow name: Build, Format and Test
# ------------------------------------------------------------
# This workflow reproduces the Jenkins pipeline stages:
#   1. Checkout
#   2. Format (go fmt) – creates `formatted‑files.txt` and uploads it
#   3. Build – uses the reusable “Go Build” composite action
#   4. Test – uses the reusable “Go Test” composite action
#
# The reusable actions are assumed to live in the repository under
#   .github/actions/go-build
#   .github/actions/go-test
#
# Standard actions are pinned to their latest major releases.
# ------------------------------------------------------------
name: Build, Format and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1️⃣ Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Set up Go (uses go.mod to pick the version)
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum

      # 3️⃣ Format Go code and capture the list of formatted files
      - name: Format Go code
        shell: bash
        run: |
          go fmt ./...
          # Capture the diff into a file – ignore errors if nothing changed
          git diff --name-only > formatted-files.txt || true

      # 4️⃣ Upload the formatted‑files.txt artifact (only if it exists)
      - name: Upload formatted files artifact
        uses: actions/upload-artifact@v4
        with:
          name: formatted-files
          path: formatted-files.txt
          if-no-files-found: ignore

      # 5️⃣ Build the Go project – this uses the reusable composite action
      - name: Build Go project
        uses: ./.github/actions/go-build

      # 6️⃣ Run Go tests – this uses the reusable composite action
      - name: Run Go tests
        uses: ./.github/actions/go-test